# -*- coding: utf-8 -*-
"""Keras MobileNet_V2 for TrashClassifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aeJuoKK5TNktejrKEzGF3OZ5fHgjRNJj
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import keras
from keras import backend as K
from keras.layers.core import Dense
from keras.optimizers import Adam
from keras.metrics import categorical_crossentropy
from keras.preprocessing.image import ImageDataGenerator
from keras.preprocessing import image
from keras.applications import imagenet_utils
from sklearn.metrics import confusion_matrix
import itertools
import matplotlib.pyplot as plt
# %matplotlib inline

mobile = keras.applications.mobilenet_v2.MobileNetV2()

def prepare_image(file):
  img_path = ''
  img = image.load_img(img_path + file, target_size=(299, 299))
  img_array = image.img_to_array(img)
  img_array_expanded_dims = np.expand_dims(img_array, axis=0)
  return keras.applications.mobilenet_v2.preprocess_input(img_array_expanded_dims)

from keras.models import Model

import requests

print('Beginning file download with requests')

url = 'https://storage.googleapis.com/kaggle-data-sets/233210/497253/bundle/archive.zip?GoogleAccessId=web-data@kaggle-161607.iam.gserviceaccount.com&Expires=1575941974&Signature=o%2FBsWxAV%2FAJsa6CItwSxJNwJgda%2F05hAwf9YGOqyRwcPqtChDix17c%2Bzs8JBYvXogCcY7ZDCxLPNTq%2F1GhUqf2U0wln3JknwZ5sSeY7mvw7UIocd1wjOndgIV%2FL26UeCrFleNtKjqj7Wi3%2Ff1rXKBPDv51%2Fih0pgGn7GZ7kDANz60yGOg%2B%2BUYebLj26JLKyFDI6NIlgRg59Chmh5A9arSjsjbT3xvNMRkF1wDMwK%2B%2FTghPiTqDPHoMqcyIRYT%2BJKtVWUogaLy9J%2F7mvp9td3J1xzoAGkWxrLL8HINwhJ7rNcsGrOy65yHkHO3ooCh9iONOrLnDyNvwLA%2BsMNCqYEMQ%3D%3D&response-content-disposition=attachment%3B+filename%3Dwaste-classification-data.zip'
r = requests.get(url)

with open('data.zip', 'wb') as f:
    f.write(r.content)

# Retrieve HTTP meta-data
print(r.status_code)
print(r.headers['content-type'])
print(r.encoding)

from zipfile import ZipFile

# Create a ZipFile Object and load sample.zip in it
with ZipFile('data.zip', 'r') as zipObj:
   # Extract all the contents of zip file in different directory
   zipObj.extractall('/content/data')

train_path = '/content/data/DATASET/TRAIN'
valid_path = '/content/data/DATASET/TEST'

train_batches = ImageDataGenerator(preprocessing_function = keras.applications.mobilenet_v2.preprocess_input).flow_from_directory(train_path, target_size = (224,224), batch_size = 10)
valid_batches = ImageDataGenerator(preprocessing_function = keras.applications.mobilenet_v2.preprocess_input).flow_from_directory(valid_path, target_size = (224,224), batch_size = 10)

mobile.summary()

for layer in mobile.layers[:-4]:
    layer.trainable = False

x = mobile.layers[-2].output

predictions = Dense(2, activation='softmax')(x)

model = Model(inputs = mobile.input, outputs = predictions)

model.summary()

model.compile(Adam(lr=1e-3), loss='categorical_crossentropy', metrics=['accuracy'])

model.fit_generator(train_batches, steps_per_epoch=4, validation_data=valid_batches, validation_steps=2, epochs=520, verbose=2)

preprocessed_image = prepare_image('/content/appl.jpg')
predictions = model.predict(preprocessed_image)
#results = imagenet_utils.decode_predictions(predictions)
#results
predictions

preprocessed_image = prepare_image('/content/bread.jpg')
predictions = model.predict(preprocessed_image)
#results = imagenet_utils.decode_predictions(predictions)
#results
predictions

import tensorflow as tf

keras_file = "7_try.h5"
model.save('7_try.h5')

TFLITE_MODEL = 'mobile.tflite'

# Convert the model to standard TensorFlow Lite model
converter = tf.lite.TFLiteConverter.from_keras_model_file(keras_file)
converted_tflite_model = converter.convert()
open(TFLITE_MODEL, "wb").write(converted_tflite_model)